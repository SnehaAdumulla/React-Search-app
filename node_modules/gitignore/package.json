{
  "_from": "gitignore",
  "_id": "gitignore@0.6.0",
  "_inBundle": false,
  "_integrity": "sha1-hRjjnR4S+JbrCXHg+MmC5hbtdl4=",
  "_location": "/gitignore",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "gitignore",
    "fetchSpec": "latest",
    "name": "gitignore",
    "raw": "gitignore",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gitignore/-/gitignore-0.6.0.tgz",
  "_shasum": "8518e39d1e12f896eb0971e0f8c982e616ed765e",
  "_shrinkwrap": null,
  "_spec": "gitignore",
  "_where": "/Users/sneha/My_Projects/firstapp",
  "author": {
    "name": "Michael Feldstein"
  },
  "bin": {
    "gitignore": "./bin/gitignore.js"
  },
  "bugs": {
    "url": "https://github.com/msfeldstein/gitignore/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Automatically fetch gitignore files for any project type from github into your new project",
  "devDependencies": {},
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/msfeldstein/gitignore#readme",
  "main": "./lib/library.js",
  "name": "gitignore",
  "optionalDependencies": {},
  "readme": "# gitignore\n\nAutomatically fetch github's excellent `.gitignore` files for any of your new projects\n\n[Here is the list of available types](https://github.com/github/gitignore)\n\n## Use as a global utility\n\n### Install\n\n    npm install gitignore -g\n\n### Usage\n\nTo list out all of the available types:\n\n    gitignore -types\n\nTo create a `.gitignore` for rails:\n\n    gitignore rails\n\nThat's it.\n\n## Use programmatically as a module\n\n### Install\n\n    npm install gitignore\n\n### and `require`\n\n    var gi = require(`gitignore`);\n\n## API\n\n### `.getTypes(callback)`\n\nGets the types via `https` request to GitHub.\n\n#### `callback(err, types)`\n\nIf an error occurred, or the request failed, an `Error` object is passed as the first parameter. If the types were successfully requested, an array of types is passed as the second parameter with `null` as the first.\n\n### `.writeFile(options, callback)`\n\nGets the `.gitignore` file from GitHub of the specified `options.type` and stores it in the writable stream at `options.file` or `options.writable`.\n\n#### `options`\n\n`.type` (string) - The type associated with the `.gitignore` file to be fetched\n`.file`, `.writable` (writable stream) - A writable stream (a file, sdtout, etc) that the results should be written to\n\n#### `callback(err)`\n\nIf an error occurred or the request did not go through, an error obect is passed as the first parameter. If the request was successful, the first parameter is `null` or `undefined`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/msfeldstein/gitignore.git"
  },
  "version": "0.6.0"
}
